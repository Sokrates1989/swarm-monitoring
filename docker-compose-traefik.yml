version: "3.9"

services:
  grafana:
    image: portainer/template-swarm-monitoring:grafana-9.5.2
    secrets:
      - "SWARM_MONITORING_GRAFANA_PASSWORD"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label=traefik-public
        - traefik.http.services.swarm_monitoring_grafana.loadbalancer.server.port=3000
        - traefik.http.routers.swarm_monitoring_grafana.rule=Host(`${GRAFANA_URL}`)
        - traefik.http.routers.swarm_monitoring_grafana.entrypoints=https,http,web
        - traefik.http.routers.swarm_monitoring_grafana.tls=true
        - traefik.http.routers.swarm_monitoring_grafana.tls.certresolver=le
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
    volumes:
      - type: bind
        source: ${DATA_ROOT}/grafana_data
        target: /var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/SWARM_MONITORING_GRAFANA_PASSWORD
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - monitoring 
      - traefik    

  prometheus:
    image: portainer/template-swarm-monitoring:prometheus-v2.44.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--log.level=error'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == manager
    volumes:
      - type: bind
        source: ${DATA_ROOT}/prometheus_data
        target: /prometheus
      - type: bind
        source: ${DATA_ROOT}/prometheus.yml
        target: /etc/prometheus/prometheus.yml
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    command: -logtostderr -docker_only
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /var/run
        target: /var/run
        read_only: true
      - type: bind
        source: /sys
        target: /sys
        read_only: true
      - type: bind
        source: /var/lib/docker
        target: /var/lib/docker
        read_only: true
      - type: bind
        source: /dev/disk
        target: /dev/disk
        read_only: true                        
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:v1.5.0
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    volumes:
      - type: bind
        source: /
        target: /rootfs
        read_only: true
      - type: bind
        source: /proc
        target: /host/proc
        read_only: true
      - type: bind
        source: /sys
        target: /host/sys
        read_only: true
    networks:
      - monitoring
    
  autoscaler:
    image: sokrates1989/swarm-autoscaler:DEBUG-0.0.7
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_ROOT}/autoscaler_logs:/code/logs
    networks:
      - traefik
      - monitoring
    secrets:
      - "SWARM_AUTOSCALER_TOKEN"
    environment:
      AUTH_TOKEN_FILE: /run/secrets/SWARM_AUTOSCALER_TOKEN
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label=traefik-public
        - traefik.http.services.autoscaler.loadbalancer.server.port=8790
        - traefik.http.routers.autoscaler.rule=Host(`${AUTOSCALER_URL}`)
        - traefik.http.routers.autoscaler.entrypoints=https,http,web
        - traefik.http.routers.autoscaler.tls=true
        - traefik.http.routers.autoscaler.tls.certresolver=le
      replicas: 1
      restart_policy: 
        condition: none
      placement:
        constraints:
          - node.role == manager

networks:
  monitoring:
    driver: overlay
  traefik:
    external: true

secrets:
  "SWARM_MONITORING_GRAFANA_PASSWORD":
    external: true
  "SWARM_AUTOSCALER_TOKEN":
    external: true
      
